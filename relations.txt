obj = model instance
tgt = single target instance
qm() = query method (returns one or more objects)
sqm() = query method (returns one object)


From Profile
owned Event(s)      obj.owned_events.qm()           --> tgt.is_archived
                    (returns ALL events, League or Tournament)
admined Event(s)    obj.admined_events.qm()         --> tgt.is_archived
EventBowler(s)      obj.eventbowler_set.qm()        --> tgt.handicap


From BowlingCenter
Event(s)            obj.events.qm()                 --> tgt.is_archived


From Event
owner               obj.owner                       --> tgt.username
admins              obj.admins.qm()                 --> tgt.username
BowlingCenter(s)    obj.bowling_centers.qm()        --> tgt.city
EventSidepot(s)     obj.event_sidepots.qm()         --> tgt.type
EventRoster(s)      obj.event_rosters.qm()          --> tgt.date


From EventBowler
Profile             obj.profile                     --> tgt.username
RosterEntry(ies)    obj.roster_entries.qm()         --> tgt.entry_count
Game                obj.games.qm()                  --> tgt.scr_score


From EventSidepot
Event               obj.event                       --> tgt.is_archived
SidepotRoster(s)    obj.sidepot_rosters.qm()        --> tgt.TBD


From SidepotRoster
EventSidepot        obj.event_sidepot               --> tgt.type
RosterEntry(ies)    obj.roster_entries              --> tgt.entry_count


From EventRoster
Event               obj.event                       --> tgt.is_archived
RosterEntry(ies)    obj.roster_entries.qm()         --> tgt.entry_count


From RosterEntry
EventRoster         obj.roster                      --> tgt.date
EventBowler         obj.bowler                      --> tgt.handicap
SidepotRoster       obj.sidepot                     --> tgt.TBD
bowler games        obj.bowler.games.qm()           --> tgt.scr_score


From Game
EventBowler         obj.bowler                      --> tgt.handicap